{"version":3,"file":"ee8b1517-f03c6b13df5273f68096.js","mappings":"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","sources":["webpack://iamjoachim/./node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * Chart.js v4.4.2\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.2\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"names":["Animator","constructor","this","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","r","call","window","_update","Date","now","remaining","running","items","length","item","i","draw","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","_fn","_easing","e","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","Object","keys","d","animation","animatedProps","getOwnPropertyNames","key","option","properties","_animateOptions","values","newOptions","options","$shared","assign","$animations","resolveTargetOptions","animations","_createAnimations","anim","all","awaitAll","then","props","charAt","value","size","scaleClip","scale","allowedOverflow","opts","reverse","end","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","s","isStacked","meta","stacked","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","indexScale","valueScale","id","getStackKey","_top","_bottom","_visualValues","getFirstScaleId","scales","filter","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","static","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","_stacked","addElements","fill","isPluginEnabled","console","warn","updateIndex","dataset","getDataset","chooseId","x","y","xid","xAxisID","v","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","data","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","u","_dataCheck","adata","Array","convertObjectDataToArray","isExtensible","l","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","canStack","otherScale","hidden","createStack","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","t","b","top","right","bottom","left","disabled","toClip","clip","defaultClip","elements","area","chartArea","drawActiveElementsOnTop","element","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","parent","dataIndex","raw","createDataContext","createDatasetContext","_resolveElementOptions","elementType","cache","cacheKey","sharing","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","DoughnutController","animateRotate","animateScale","numbers","cutout","rotation","circumference","radius","spacing","_scriptable","name","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","getDataVisibility","onClick","legendItem","toggleDataVisibility","super","innerRadius","outerRadius","offsetX","offsetY","getter","_getRotation","_getCircumference","_getRotationExtents","T","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","width","height","chartWeight","_getRingWeight","ratioX","ratioY","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","a","calcMin","maxX","maxY","H","minX","P","minY","getRatioAndOffset","maxWidth","maxHeight","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","isNaN","abs","locale","borderAlign","hoverBorderWidth","offset","hoverOffset","ringWeightOffset","weight","binarySearch","metaset","intersect","lookupMethod","_reversePixels","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","skip","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","inRange","getNearestCartesianItems","distanceMetric","useX","indexOf","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getDistanceMetricForAxis","minDistance","center","getCenterPoint","distance","getNearestItems","getProps","getNearestRadialItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","point","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","sort","v0","v1","setLayoutDims","layouts","params","wrap","stackWeight","includes","_stack","placed","buildStacks","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","horizontal","availableWidth","availableHeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","getMargins","marginForPositions","positions","margin","fitBoxes","boxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","layoutBoxes","isHorizontal","wrapBoxes","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","display","updatePos","change","handleMaxPadding","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","passive","removeListener","nodeListContains","nodeList","node","contains","createAttachObserver","observer","MutationObserver","entries","trigger","entry","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","proxy","native","fromNativeEvent","addListener","DomPlatform","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","isConnected","Element","tooltipPosition","hasValue","final","ret","autoSkip","ticks","tickOpts","determinedMaxTicks","tickLength","_tickSize","maxScale","_length","maxChart","_maxLength","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","result","getMajorIndices","numMajorIndices","first","last","newTicks","next","ceil","skipMajors","evenMajorSpacing","len","diff","getEvenSpacing","factors","calculateSpacing","avgMajorSpacing","round","majorStart","majorEnd","offsetFromEdge","edge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","epsilon","lineValue","getPixelForTick","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","lineHeight","titleAlign","align","reverseAlign","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","init","setContext","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","beginAtZero","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","startPixel","endPixel","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","grid","title","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","caches","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","string","gc","gcLen","garbageCollect","valueAt","idx","getPixelForValue","getValueForPixel","pixel","getPixelForDecimal","decimal","getDecimalForPixel","getBasePixel","getBaseValue","createTickContext","optionTicks","rot","autoSkipPadding","_computeGridLineItems","border","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","backdrop","tickTextAlign","showLabelBackdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","getLineWidthForValue","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","titleArgs","tz","gz","bz","prototype","axisID","_maxDigits","fontSize","TypedRegistry","scope","override","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","Error","itemDefaults","defaults","defaultRoutes","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","routeDefaults","descriptors","describe","registerDefaults","overrides","unregister","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","localIds","local","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","idMatchesAxis","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","boundDs","retrieveAxisFromDatasets","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","initOptions","initData","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","obj","Config","_config","initConfig","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","isScriptable","isIndexable","hasFunction","needContext","subResolver","descriptorDefaults","resolverCache","p","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","getSizeForArea","field","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_detectPlatform","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","maintainAspectRatio","responsive","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","_dataset","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","hover","deactivated","activated","inChartArea","eventFilter","_handleEvent","_getActiveElements","isClick","lastEvent","determineLastEvent","onHover","parseBorderRadius$1","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","val","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","circular","pixelMargin","innerR","spacingOffset","alpha","avNogSpacingRadius","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","PI","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","closePath","fullCircles","borderJoinStyle","inner","lineJoin","angleMargin","clipArc","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","halfAngle","halfRadius","translate","radiusOffset","drawArc","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","legendItemText","calculateItemWidth","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","line","textDirection","textWidth","setWidth","lineCap","lineDash","drawOptions","SQRT2","xPlus","yBoxTop","xBoxLeft","rect","drawLegendBox","strikethrough","fillText","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","isListened","hoveredItem","previous","sameItem","plugin_legend","_element","_args","afterEvent","ci","useBorderRadius","borderCapStyle","WeakMap","positioners","average","xSet","eventPosition","nearestElement","tp","pushOrConcat","base","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","lines","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineXAlign","yAlign","chartWidth","xAlign","caret","caretSize","caretPadding","doesNotFitWithAlign","determineAlignment","determineYAlign","getBackgroundPoint","alignment","cornerRadius","paddingAndSize","topLeft","topRight","bottomLeft","bottomRight","alignX","alignY","getAlignedX","getBeforeAfterBodyLines","overrideCallbacks","defaultCallbacks","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","LinearScale","LinearScaleBase","formatters","numeric","handleTickRangeOptions","computeTickLimit","ratio","_startValue","_valueRange","LogarithmicScale","logarithmic","_zero","changeExponent","setMin","setMax","generateTicks","bounds","format","RadialLinearScale","animate","angleLines","pointLabels","centerPointLabels","xCenter","yCenter","drawingArea","_pointLabels","_pointLabelItems","_padding","getTickBackdropHeight","fitWithPointLabels","setCenterPoint","leftMovement","rightMovement","topMovement","bottomMovement","getIndexAngle","angleMultiplier","getDistanceFromCenterForValue","scalingFactor","getValueForDistanceFromCenter","scaledDistance","getPointLabelContext","pointLabel","createPointLabelContext","getPointPosition","distanceFromCenter","additionalAngle","getPointPositionForValue","getBasePosition","getPointLabelPosition","pathRadiusLine","_endValue","drawPointLabelBox","plFont","drawPointLabels","gridLineOpts","drawRadiusLine","rotate"],"sourceRoot":""}