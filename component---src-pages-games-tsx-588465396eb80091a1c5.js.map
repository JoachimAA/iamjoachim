{"version":3,"file":"component---src-pages-games-tsx-588465396eb80091a1c5.js","mappings":"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","sources":["webpack://iamjoachim/./src/components/typography/Body.tsx","webpack://iamjoachim/./src/components/typography/H2.tsx","webpack://iamjoachim/./src/components/games/peg-solitaire/Background.tsx","webpack://iamjoachim/./src/components/games/peg-solitaire/peg-solitaire-utils.ts","webpack://iamjoachim/./src/components/games/peg-solitaire/PegNode.tsx","webpack://iamjoachim/./src/components/games/peg-solitaire/Nodes.tsx","webpack://iamjoachim/./src/components/games/peg-solitaire/Instructions.tsx","webpack://iamjoachim/./src/components/games/peg-solitaire/PegSolitaire.tsx","webpack://iamjoachim/./src/pages/games.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface BodyProps {\n  message: string;\n}\n\nexport default function Body({ message }: BodyProps) {\n  return <BodyRoot>{message}</BodyRoot>;\n}\n\nconst BodyRoot = styled(\"body\")({\n  fontFamily: \"-apple-system, Roboto, sans-serif, serif\",\n  margin: \"0px\",\n});\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface H2Props {\n  message: string;\n}\n\nexport default function H2({ message }: H2Props) {\n  return <H2Root>{message}</H2Root>;\n}\n\nconst H2Root = styled(\"h2\")({\n  fontFamily: \"-apple-system, Roboto, sans-serif, serif\",\n  margin: \"0px\",\n});\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport default function Background() {\n  return (\n    <>\n      <UpDown />\n      <Across />\n    </>\n  );\n}\n\nconst UpDown = styled(\"div\")({\n  backgroundColor: \"#E5E4E2\",\n  gridArea: \"1/3/8/6\",\n  borderRadius: \"30px\",\n});\n\nconst Across = styled(\"div\")({\n  backgroundColor: \"#E5E4E2\",\n  gridArea: \"3/1/6/8\",\n  borderRadius: \"30px\",\n});\n","export const getColumn = (idx: number) => {\n  if (idx < 3) {\n    return 1;\n  } else if (idx < 6) {\n    return 2;\n  } else if (idx < 13) {\n    return 3;\n  } else if (idx < 20) {\n    return 4;\n  } else if (idx < 27) {\n    return 5;\n  } else if (idx < 30) {\n    return 6;\n  } else {\n    return 7;\n  }\n};\n\nexport const getRow = (idx: number, column: number) => {\n  if (column === 1 || column === 2 || column === 6 || column === 7) {\n    return 3 + (idx % 3);\n  } else {\n    return ((idx + 1) % 7) + 1;\n  }\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface NodeProps {\n  selected: boolean;\n  empty: boolean;\n}\n\nexport default function PegNode({ selected, empty }: NodeProps) {\n  return <NodeContainer selected={selected} empty={empty} />;\n}\n\nconst NodeContainer = styled(\"div\")<{ selected: boolean; empty: boolean }>`\n  ${(props) => `\n  outline: ${props.selected ? \"2px solid black\" : \"none\"};\n  border: 2px solid #E5E4E2;\n  border-radius: 100px;\n  height: 40px;\n  width: 40px;\n  background-color: ${props.empty ? \"#C0C0C0\" : \"var(--primary-color)\"};\n  `}\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { getColumn, getRow } from \"./peg-solitaire-utils\";\nimport PegNode from \"./PegNode\";\n\nconst NUMBER_OF_GAME_BOARD_NODES = 33;\n\ninterface Node {\n  column: number;\n  row: number;\n  idx: number;\n  empty: boolean;\n}\n\nexport default function Nodes() {\n  const [selectedNode, setSelectedNode] = useState<Node | null>(null);\n\n  const [nodes, setNodes] = useState<Node[]>(\n    Array.from({ length: NUMBER_OF_GAME_BOARD_NODES }).map((value, idx) => {\n      const column = getColumn(idx);\n      const row = getRow(idx, column);\n      return { idx, column, row, empty: idx === 16 ? true : false };\n    })\n  );\n\n  const updateNodes = (clickedNode: Node, jumpNode: Node) => {\n    setNodes((currentNodes) => {\n      if (!selectedNode) return currentNodes;\n\n      const updatedNodes = currentNodes.map((node) => {\n        if (node.idx === clickedNode.idx) {\n          return { ...node, empty: false };\n        } else if (node.idx === jumpNode.idx || node.idx === selectedNode.idx) {\n          return { ...node, empty: true };\n        } else {\n          return node;\n        }\n      });\n\n      return updatedNodes;\n    });\n  };\n\n  const getJumpNode = (clickedNode: Node) => {\n    if (!selectedNode) return null;\n\n    const { row, column } = selectedNode;\n\n    if (column + 2 === clickedNode.column && row === clickedNode.row) {\n      // right\n      return nodes.find(\n        (node) => node.column === column + 1 && node.row === row\n      );\n    } else if (column - 2 === clickedNode.column && row === clickedNode.row) {\n      // left\n      return nodes.find(\n        (node) => node.column === column - 1 && node.row === row\n      );\n    } else if (row + 2 === clickedNode.row && column === clickedNode.column) {\n      // down\n      return nodes.find(\n        (node) => node.row === row + 1 && node.column === column\n      );\n    } else if (row - 2 === clickedNode.row && column === clickedNode.column) {\n      // up\n      return nodes.find(\n        (node) => node.row === row - 1 && node.column === column\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const onClickNode = (idx: number, nodeEmpty: boolean) => {\n    if (nodeEmpty) {\n      const clickedNode = nodes[idx];\n      const jumpNode = getJumpNode(clickedNode);\n      if (jumpNode && !nodes.find((node) => node.idx === jumpNode.idx)?.empty) {\n        updateNodes(clickedNode, jumpNode);\n        setSelectedNode(clickedNode);\n        if (!checkForPossibleMoves()) {\n          console.log(\"game over\");\n        }\n      }\n    } else {\n      setSelectedNode(nodes[idx]);\n    }\n  };\n\n  useEffect(() => {\n    if (!checkForPossibleMoves()) {\n      const occupiedNodes = nodes.filter((node) => !node.empty);\n      if (\n        occupiedNodes.length === 1 &&\n        occupiedNodes[0].column === 4 &&\n        occupiedNodes[0].row === 4\n      ) {\n        console.log(\"you win\");\n      } else {\n        console.log(\"you lose\");\n      }\n    }\n  }, [nodes]);\n\n  const checkForPossibleMoves = () => {\n    const occupiedNodes = nodes.filter((node) => !node.empty);\n\n    for (const occupiedNode of occupiedNodes) {\n      const possibleMoves = [\n        {\n          adjacent: { row: occupiedNode.row - 1, column: occupiedNode.column },\n          jumpTo: { row: occupiedNode.row - 2, column: occupiedNode.column },\n        },\n        {\n          adjacent: { row: occupiedNode.row + 1, column: occupiedNode.column },\n          jumpTo: { row: occupiedNode.row + 2, column: occupiedNode.column },\n        },\n        {\n          adjacent: { row: occupiedNode.row, column: occupiedNode.column - 1 },\n          jumpTo: { row: occupiedNode.row, column: occupiedNode.column - 2 },\n        },\n        {\n          adjacent: { row: occupiedNode.row, column: occupiedNode.column + 1 },\n          jumpTo: { row: occupiedNode.row, column: occupiedNode.column + 2 },\n        },\n      ];\n\n      for (const possibleMove of possibleMoves) {\n        const isAdjacentOccupied = nodes.some(\n          (node) =>\n            node.row === possibleMove.adjacent.row &&\n            node.column === possibleMove.adjacent.column &&\n            !node.empty\n        );\n\n        const isJumpToAvailable = nodes.some(\n          (node) =>\n            node.row === possibleMove.jumpTo.row &&\n            node.column === possibleMove.jumpTo.column &&\n            node.empty\n        );\n\n        if (isAdjacentOccupied && isJumpToAvailable) {\n          console.log(\"Found adjacent node with a jump available\");\n          console.log(\n            \"possible move c \" +\n              occupiedNode.column +\n              \" r \" +\n              occupiedNode.row +\n              \" -> c \" +\n              possibleMove.jumpTo.column +\n              \" r \" +\n              possibleMove.jumpTo.row\n          );\n          return true;\n        }\n      }\n    }\n\n    console.log(\"No moves left\");\n    return false;\n  };\n\n  return (\n    <>\n      {nodes.map((node, idx) => {\n        return (\n          <NodeContainer\n            key={idx}\n            style={{\n              gridColumn: node.column,\n              gridRow: node.row,\n            }}\n            onClick={() => onClickNode(idx, node.empty)}\n          >\n            <PegNode selected={idx === selectedNode?.idx} empty={node.empty} />\n          </NodeContainer>\n        );\n      })}\n    </>\n  );\n}\n\nconst NodeContainer = styled(\"div\")({\n  justifySelf: \"center\",\n  alignSelf: \"center\",\n});\n","import React from \"react\";\nimport H3 from \"../../typography/H3\";\nimport Body from \"../../typography/Body\";\n\nexport default function Instructions() {\n  return (\n    <div>\n      <H3 message=\"Instructions\" />\n      <Body message=\"The aim of peg solitaire is to remove the pegs one by one by jumping over other pegs into empty holes. The board starts with just one hole in the middle.\" />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport PegNode from \"./PegNode\";\nimport { getColumn, getRow } from \"./peg-solitaire-utils\";\nimport Background from \"./Background\";\nimport Nodes from \"./Nodes\";\nimport Instructions from \"./Instructions\";\n\nexport default function PegSolitaire() {\n  return (\n    <Root>\n      <GameBoard>\n        <Background />\n        <Nodes />\n      </GameBoard>\n      <Instructions />\n    </Root>\n  );\n}\n\nconst Root = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  gap: \"24px\",\n});\n\nconst GameBoard = styled(\"div\")({\n  display: \"grid\",\n  gridTemplateColumns: \"repeat(7, 60px)\",\n  gridTemplateRows: \"repeat(7, 60px)\",\n});\n","import React from \"react\";\nimport PegSolitaire from \"../components/games/peg-solitaire/PegSolitaire\";\nimport styled from \"styled-components\";\nimport H2 from \"../components/typography/H2\";\n\nexport default function Games() {\n  return (\n    <ContentContainer>\n      <H2 message=\"Peg solitaire\" />\n      <PegSolitaire />\n    </ContentContainer>\n  );\n}\n\nconst ContentContainer = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  gap: \"24px\",\n});\n"],"names":["Body","message","React","BodyRoot","styled","fontFamily","margin","H2","H2Root","Background","UpDown","Across","backgroundColor","gridArea","borderRadius","getColumn","idx","getRow","column","PegNode","selected","empty","NodeContainer","props","NUMBER_OF_GAME_BOARD_NODES","Nodes","selectedNode","setSelectedNode","useState","nodes","setNodes","Array","from","length","map","value","row","onClickNode","nodeEmpty","clickedNode","jumpNode","find","node","getJumpNode","_nodes$find","currentNodes","updateNodes","checkForPossibleMoves","console","log","useEffect","occupiedNodes","filter","occupiedNode","possibleMoves","adjacent","jumpTo","possibleMove","isAdjacentOccupied","some","isJumpToAvailable","key","style","gridColumn","gridRow","onClick","justifySelf","alignSelf","Instructions","H3","PegSolitaire","Root","GameBoard","display","flexDirection","alignItems","gap","gridTemplateColumns","gridTemplateRows","Games","ContentContainer","displayName","componentId","justifyContent"],"sourceRoot":""}